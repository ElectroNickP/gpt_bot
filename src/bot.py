import os
import sys
import subprocess
import logging
import json
import openai
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# --- üìå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
VENV_DIR = "bot_env"

# --- üìå –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Python 3 ---
PYTHON_EXEC = sys.executable  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π Python

if "python" not in PYTHON_EXEC.lower():  # –ï—Å–ª–∏ `python` –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º `python3`
    PYTHON_EXEC = subprocess.run(["which", "python3"], capture_output=True, text=True).stdout.strip()
    if not PYTHON_EXEC:
        sys.exit("‚ùå –û—à–∏–±–∫–∞: Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ ---
if not os.path.exists(VENV_DIR):
    print(f"üîß –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—é {VENV_DIR}...")
    
    # –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    subprocess.run([PYTHON_EXEC, "-m", "venv", VENV_DIR], check=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ venv
    venv_pip = os.path.join(VENV_DIR, "bin", "pip") if os.name != "nt" else os.path.join(VENV_DIR, "Scripts", "pip.exe")
    subprocess.run([venv_pip, "install", "-U", "openai", "aiogram", "python-dotenv"], check=True)
    
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# --- üìå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
VENV_PYTHON = os.path.join(VENV_DIR, "bin", "python") if os.name != "nt" else os.path.join(VENV_DIR, "Scripts", "python.exe")

if sys.prefix != os.path.abspath(VENV_DIR):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–¥ –≤ venv
    print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç –≤–Ω—É—Ç—Ä–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è {VENV_DIR}...")
    os.execv(VENV_PYTHON, [VENV_PYTHON] + sys.argv)

# --- üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
def load_config():
    config_file = "config.json"
    
    if os.path.exists(config_file):
        with open(config_file, "r", encoding="utf-8") as f:
            return json.load(f)
    
    config = {
        "TELEGRAM_TOKEN": os.getenv("TELEGRAM_TOKEN", ""),
        "OPENAI_API_KEY": os.getenv("OPENAI_API_KEY", ""),
        "ASSISTANT_ID": os.getenv("ASSISTANT_ID", ""),
    }
    
    with open(config_file, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=4)
    
    return config

# --- üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ---
config = load_config()

TELEGRAM_TOKEN = config.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = config.get("OPENAI_API_KEY")
ASSISTANT_ID = config.get("ASSISTANT_ID")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not ASSISTANT_ID:
    sys.exit("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å config.json –∏ –¥–æ–±–∞–≤—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- üìå –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI Assistants API v2 ---
async def ask_openai(prompt, thread_id=None):
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY, default_headers={"OpenAI-Beta": "assistants=v2"})

        if not thread_id:
            thread = client.beta.threads.create()
            thread_id = thread.id

        client.beta.threads.messages.create(thread_id=thread_id, role="user", content=prompt)

        run = client.beta.threads.runs.create(thread_id=thread_id, assistant_id=ASSISTANT_ID)

        while True:
            run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            if run_status.status == "completed":
                break
            await asyncio.sleep(2)

        messages = client.beta.threads.messages.list(thread_id=thread_id)
        last_message = messages.data[0].content[0].text.value

        return last_message, thread_id

    except openai.OpenAIError as e:
        logging.error(f"OpenAI API Error: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None

# --- üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É OpenAI.")

@dp.message()
async def handle_message(message: Message):
    user_text = message.text
    await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    try:
        response, _ = await ask_openai(user_text)
        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# --- üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
